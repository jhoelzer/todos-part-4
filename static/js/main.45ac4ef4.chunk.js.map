{"version":3,"sources":["components/TodoHeader.js","actions/index.js","components/TodoFooter.js","components/TodoItem.js","components/TodoList.js","components/App.js","reducers/reducer.js","serviceWorker.js","index.js"],"names":["TodoHeader","state","title","handleChange","event","_this","setState","target","value","addTodo","props","keyCode","this","react_default","a","createElement","className","placeholder","onKeyDown","onChange","autoFocus","Component","connect","dispatch","type","payload","TodoFooter","_this$props","deleteAll","completed","filter","Link","to","onClick","todos","todoList","TodoItem","toggleCompleted","deleteOne","defaultChecked","TodoList","Fragment","components_TodoHeader","map","todo","components_TodoItem","key","id","components_TodoFooter","location","pathname","App","clickedId","allHandlingProps","length","Switch","Route","exact","path","render","components_TodoList","Object","assign","initialState","todoReducer","arguments","undefined","action","newest","userId","Math","floor","random","objectSpread","toConsumableArray","concat","newTodosDeleteComp","newTodosDelete","newTodosToggle","Boolean","window","hostname","match","store","createStore","ReactDOM","BrowserRouter","basename","process","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.45ac4ef4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../actions/index';\n\nclass TodoHeader extends Component {\n    state = {\n        title: \"\"\n    };\n\n    handleChange =  event => {\n        this.setState({\n            title: event.target.value\n        })\n    };\n\n    addTodo = event => {\n        const { addTodo } = this.props;\n        const { title } = this.state;\n\n        if (event.keyCode === 13) {\n            addTodo(title);\n            this.setState({\n                title: \"\"\n            });\n        };\n    };\n\n    render() {\n        const { title } = this.state;\n        return (\n            <header className=\"header\">\n                <h1>Todos</h1>\n                <input className=\"new-todo\" placeholder=\"What needs doing?\" value={title} onKeyDown={this.addTodo} onChange={this.handleChange} autoFocus />\n            </header>\n        );\n    };\n};\n  \nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTodo: title => dispatch(addTodo(title))\n    }\n};\n\nexport default connect(null, mapDispatchToProps)(TodoHeader);","export const TOGGLE_TODO = 'TOGGLE_TODO';\nexport const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const CLEAR_COMPLETED_TODOS = 'CLEAR_COMPLETED_TODOS';\n\nexport const toggleCompleted = (id) => {\n    return {\n        type: TOGGLE_TODO,\n        payload: id\n    }\n};\n\nexport const addTodo = (title) => {\n    return {\n        type: ADD_TODO,\n        payload: title\n    }\n};\n\nexport const deleteOne = (id) => {\n    return {\n        type: DELETE_TODO,\n        payload: id\n    }\n};\n\nexport const deleteAll = () => {\n    return {\n        type: CLEAR_COMPLETED_TODOS\n    }\n};","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { deleteAll } from '../actions/index';\n\nclass TodoFooter extends Component {\n    render() {\n        const { completed, deleteAll, filter } = this.props;\n        return (\n            <footer className=\"footer\">\n                    <span className=\"todo-count\"><strong>{this.props.completed}</strong> items(s) left</span>\n                    <ul className=\"filters\">\n                        <li><Link to=\"/\" className={filter === \"/\" ? \"selected\" : \"\"}>All</Link></li>\n                        <li><Link to=\"/active\" className={filter === \"/active\" ? \"selected\" : \"\"}>Active</Link></li>\n                        <li><Link to=\"/completed\" className={filter === \"/completed\" ? \"selected\" : \"\"}>Completed</Link></li>\n                    </ul>\n                    <button className=\"clear-completed\" onClick={deleteAll}>Clear Completed</button>\n            </footer>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      todos: state.todoList\n    }\n  };\n  \n  const mapDispatchToProps = (dispatch) => {\n    return {\n      deleteAll: () => dispatch(deleteAll())\n    }\n  };\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(TodoFooter);","import React, { Component } from 'react';\nimport { addTodo, deleteOne, toggleCompleted } from '../actions/index';\nimport { connect } from 'react-redux';\n\nclass TodoItem extends Component {\n    render() {\n        const { title, completed, toggleCompleted, deleteOne } = this.props;\n\n        return (\n            <li className={completed ? \"completed\" : \"\"}>\n                <div className=\"view\">\n                    <input className=\"toggle\" type=\"checkbox\" onClick={toggleCompleted} defaultChecked={completed} />\n                    <label>{title}</label>\n                    <button className=\"destroy\" onClick={deleteOne}></button>\n                </div>\n            </li>\n        );\n    };\n};\n\nexport default TodoItem;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TodoHeader from './TodoHeader.js';\nimport TodoFooter from './TodoFooter.js';\nimport TodoItem from './TodoItem.js';\n\nclass TodoList extends Component {\n\n    render() {\n        const { todos, addTodo } = this.props;\n    \n        return (\n            <React.Fragment>\n                <TodoHeader addTodo={addTodo} />\n                <section className=\"main\">\n                    <ul className=\"todo-list\">\n                        {todos.map(todo =>\n                            <TodoItem \n                                key={todo.id}\n                                title={todo.title}\n                                completed={todo.completed}\n                                toggleCompleted={this.props.toggleCompleted(todo.id)}\n                                deleteOne={this.props.deleteOne(todo.id)}\n                            />\n                        )}\n                    </ul>\n                </section>\n                <TodoFooter completed={this.props.completed} deleteAll={this.props.deleteAll} filter={this.props.location.pathname} />\n            </React.Fragment>\n        );\n    };\n};\n\nexport default TodoList;","import React, { Component } from 'react';\nimport '../index.css';\nimport TodoList from './TodoList.js';\nimport todoList from '../todos.json';\nimport { Switch, Route } from \"react-router-dom\";\nimport { deleteOne, toggleCompleted } from '../actions/index.js';\nimport { connect } from 'react-redux';\n\nclass App extends Component {\n\n  toggleCompleted = clickedId => event => {\n    this.props.toggleCompleted(clickedId)\n  };\n\n  deleteOne = clickedId => event => {\n    this.props.deleteOne(clickedId)\n  };\n\n  render() {\n    const { todos } = this.props;\n    const allHandlingProps = {\n      deleteOne: this.deleteOne,\n      toggleCompleted: this.toggleCompleted,\n      completed: todos.filter(todo => !todo.completed).length\n    };\n\n    return (\n      <section className=\"todoapp\">\n        <Switch>\n          <Route exact path=\"/active\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos.filter(todo => !todo.completed)} />} />\n          <Route exact path=\"/completed\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos.filter(todo => todo.completed)} />} />\n          <Route exact path=\"/\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos} />} />\n        </Switch>\n      </section>\n    );\n  };\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    todos: state.todoList\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    deleteOne: id => dispatch(deleteOne(id)),\n    toggleCompleted: id => dispatch(toggleCompleted(id))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { TOGGLE_TODO, ADD_TODO, DELETE_TODO, CLEAR_COMPLETED_TODOS} from '../actions/index.js';\nimport todoList from '../todos.json';\n\nconst initialState = {\n    todoList\n};\n\nconst todoReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_TODO:\n            let makeId = Math.floor(Math.random() * 500000000);\n            let newest = {\n                userId: 1,\n                id: makeId,\n                title: action.payload,\n                completed: false\n            };\n            return {\n                ...state,\n                todos: [...state.todoList, newest]\n            };\n\n        case CLEAR_COMPLETED_TODOS:\n            const newTodosDeleteComp = state.todoList.filter(todo => !todo.completed)\n            return {\n                ...state,\n                todoList: newTodosDeleteComp\n            };\n\n        case DELETE_TODO:\n            const newTodosDelete = state.todoList.filter(todo => {\n                if (todo.id === action.payload) {\n                    return false;\n                }\n        \n                return true;\n            });\n            return {\n                ...state,\n                todoList: newTodosDelete\n            }\n\n        case TOGGLE_TODO:\n            const newTodosToggle = state.todoList.map(todo => {\n                if (todo.id === action.payload) {\n                todo.completed = !todo.completed;\n                }\n        \n                return todo;\n            });\n            return {\n                ...state,\n                todoList: newTodosToggle\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default todoReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport './index.css';\nimport App from './components/App';\nimport todoReducer from './reducers/reducer.js'\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nlet store = createStore(todoReducer);\n\nconst Index = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <Route render={(props) => \n                <App pathname={props.location.pathname} />\n            }></Route>\n        </Provider>\n    </BrowserRouter>\n);\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Index />, document.getElementById('root'));"],"sourceRoot":""}