{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/App.js","actions/index.js","serviceWorker.js","reducers/reducer.js","store.js","index.js"],"names":["TodoItem","_this$props","this","props","title","completed","toggleCompleted","deleteOne","react_default","a","createElement","className","type","onClick","defaultChecked","Component","TodoList","state","todos","todoList","_this2","Fragment","placeholder","onKeyDown","addTodo","autoFocus","map","todo","components_TodoItem","key","id","NavLink","exact","to","activeClassName","deleteAll","App","clickedId","event","_this","allHandlingProps","filter","length","Switch","Route","path","render","components_TodoList","Object","assign","connect","dispatch","payload","Boolean","window","location","hostname","match","initialState","todoReducer","arguments","undefined","action","newTodosToggle","objectSpread","newest","userId","Math","floor","random","toConsumableArray","concat","newTodosDelete","newTodosDeleteComp","store","createStore","reducer","_REDUX_DEVTOOLS_EXTENSION_","ReactDOM","es","BrowserRouter","basename","process","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.59898aac.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TodoItem extends Component {\n    render() {\n        const { title, completed, toggleCompleted, deleteOne } = this.props;\n\n        return (\n            <li className={completed ? \"completed\" : \"\"}>\n                <div className=\"view\">\n                    <input className=\"toggle\" type=\"checkbox\" onClick={toggleCompleted} defaultChecked={completed} />\n                    <label>{title}</label>\n                    <button className=\"destroy\" onClick={deleteOne}></button>\n                </div>\n            </li>\n        );\n    };\n};\n\nexport default TodoItem;","import React, { Component } from 'react';\nimport TodoItem from './TodoItem.js';\nimport todoList from '../todos.json';\nimport { NavLink } from \"react-router-dom\";\n\nclass TodoList extends Component {\n    state = { todos: todoList };\n\n    render() {\n        const { todos } = this.props;\n    \n        return (\n            <React.Fragment>\n                <header className=\"header\">\n                    <h1>Todos</h1>\n                    <input className=\"new-todo\" placeholder=\"What needs doing?\" onKeyDown={this.props.addTodo} autoFocus />\n                </header>\n\n                <section className=\"main\">\n                    <ul className=\"todo-list\">\n                        {todos.map(todo =>\n                            <TodoItem \n                                key={todo.id}\n                                title={todo.title}\n                                completed={todo.completed}\n                                toggleCompleted={this.props.toggleCompleted(todo.id)}\n                                deleteOne={this.props.deleteOne(todo.id)}\n                            />\n                        )}\n                    </ul>\n                </section>\n\n                <footer className=\"footer\">\n                    <span className=\"todo-count\"><strong>{this.props.completed}</strong> items(s) left</span>\n                    <ul className=\"filters\">\n                        <li><NavLink exact to=\"/\" activeClassName=\"selected\">All</NavLink></li>\n                        <li><NavLink exact to=\"/active\" activeClassName=\"selected\">Active</NavLink></li>\n                        <li><NavLink exact to=\"/completed\" activeClassName=\"selected\">Completed</NavLink></li>\n                    </ul>\n                    <button className=\"clear-completed\" onClick={this.deleteAll}>Clear Completed</button>\n                </footer>\n            </React.Fragment>\n        );\n    };\n};\n\nexport default TodoList;","import React, { Component } from 'react';\nimport '../index.css';\nimport TodoList from './TodoList.js';\nimport todoList from '../todos.json';\nimport { Switch, Route } from \"react-router-dom\";\nimport { deleteOne, toggleCompleted } from '../actions/index.js';\nimport { connect } from 'react-redux';\n\nclass App extends Component {\n\n  toggleCompleted = clickedId => event => {\n    this.props.toggleCompleted(clickedId)\n  };\n\n  deleteOne = clickedId => event => {\n    this.props.toggleCompleted(clickedId)\n  };\n\n  render() {\n    const { todos } = this.props;\n    const allHandlingProps = {\n      toggleCompleted: this.toggleCompleted,\n      // addTodo: this.addTodo,\n      deleteOne: this.deleteOne,\n      // deleteAll: this.deleteAll,\n      completed: todos.filter(todo => !todo.completed).length\n    };\n\n    return (\n      <section className=\"todoapp\">\n        <Switch>\n          <Route path=\"/active\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos.filter(todo => !todo.completed)} />} />\n          <Route path=\"/completed\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos.filter(todo => todo.completed)} />} />\n          <Route path=\"/\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos} />} />\n        </Switch>\n      </section>\n    );\n  };\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    todos: state.todoList\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    deleteOne: id => dispatch(deleteOne(id)),\n    toggleCompleted: id => dispatch(toggleCompleted(id))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","export const TOGGLE_TODO = 'TOGGLE_TODO';\nexport const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const CLEAR_COMPLETED_TODOS = 'CLEAR_COMPLETED_TODOS';\n\nexport const toggleCompleted = (id) => {\n    return {\n        type: TOGGLE_TODO,\n        payload: id\n    }\n};\n\nexport const addTodo = (title) => {\n    return {\n        type: ADD_TODO,\n        payload: title\n    }\n};\n\nexport const deleteOne = (id) => {\n    return {\n        type: DELETE_TODO,\n        payload: id\n    }\n};\n\nexport const deleteAll = () => {\n    return {\n        type: CLEAR_COMPLETED_TODOS\n    }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { TOGGLE_TODO, ADD_TODO, DELETE_TODO, CLEAR_COMPLETED_TODOS} from '../actions/index.js';\nimport todoList from '../todos.json';\n\nconst initialState = {\n    todoList\n};\n\nconst todoReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case TOGGLE_TODO:\n            const newTodosToggle = state.todoList.map(todo => {\n                if (todo.id === action.payload) {\n                todo.completed = !todo.completed;\n                }\n        \n                return todo;\n            });\n            return {\n                ...state,\n                todoList: newTodosToggle\n            };\n\n        case ADD_TODO:\n            let makeId = Math.floor(Math.random() * 500000000);\n            let newest = {\n                userId: 1,\n                id: makeId,\n                title: action.payload,\n                completed: false\n            };\n            return {\n                ...state,\n                todos: [...state.todoList, newest]\n            };\n\n        case DELETE_TODO:\n            const newTodosDelete = state.todoList.filter(todo => {\n                if (todo.id === action.payload) {\n                    return false;\n                }\n        \n                return true;\n            });\n            return {\n                ...state,\n                todoList: newTodosDelete\n            }\n\n        case CLEAR_COMPLETED_TODOS:\n            const newTodosDeleteComp = state.todoList.filter(todo => !todo.completed)\n            return {\n                ...state,\n                todoList: newTodosDeleteComp\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default todoReducer;","import { createStore } from 'redux';\nimport reducer from './reducers/reducer.js';\n\nconst store = createStore(reducer, window._REDUX_DEVTOOLS_EXTENSION_ && window._REDUX_DEVTOOLS_EXTENSION_())\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nconst Index = () => (\n    <Provider store={store}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <App/>\n        </BrowserRouter>\n    </Provider>\n);\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Index />, document.getElementById('root'));"],"sourceRoot":""}