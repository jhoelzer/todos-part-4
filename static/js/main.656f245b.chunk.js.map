{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/App.js","serviceWorker.js","index.js"],"names":["TodoItem","_this$props","this","props","title","completed","toggleCompleted","deleteOne","react_default","a","createElement","className","type","onClick","defaultChecked","Component","TodoList","state","todos","todoList","_this2","Fragment","placeholder","onKeyDown","addTodo","autoFocus","map","todo","components_TodoItem","key","id","NavLink","exact","to","activeClassName","deleteAll","App","clickedId","event","newTodos","_this","setState","makeId","Math","floor","random","keyCode","slice","newest","userId","target","value","push","filter","allHandlingProps","Switch","Route","path","render","components_TodoList","Object","assign","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","basename","process","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.656f245b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TodoItem extends Component {\n    render() {\n        const { title, completed, toggleCompleted, deleteOne } = this.props;\n\n        return (\n            <li className={completed ? \"completed\" : \"\"}>\n                <div className=\"view\">\n                    <input className=\"toggle\" type=\"checkbox\" onClick={toggleCompleted} defaultChecked={completed} />\n                    <label>{title}</label>\n                    <button className=\"destroy\" onClick={deleteOne}></button>\n                </div>\n            </li>\n        );\n    };\n};\n\nexport default TodoItem;","import React, { Component } from 'react';\nimport TodoItem from './TodoItem.js';\nimport todoList from '../todos.json';\nimport { NavLink } from \"react-router-dom\";\n\nclass TodoList extends Component {\n    state = { todos: todoList };\n\n    render() {\n        const { todos } = this.props;\n    \n        return (\n            <React.Fragment>\n                <header className=\"header\">\n                    <h1>Todos</h1>\n                    <input className=\"new-todo\" placeholder=\"What needs doing?\" onKeyDown={this.props.addTodo} autoFocus />\n                </header>\n\n                <section className=\"main\">\n                    <ul className=\"todo-list\">\n                        {todos.map(todo =>\n                            <TodoItem \n                                key={todo.id}\n                                title={todo.title}\n                                completed={todo.completed}\n                                toggleCompleted={this.props.toggleCompleted(todo.id)}\n                                deleteOne={this.props.deleteOne(todo.id)}\n                            />\n                        )}\n                    </ul>\n                </section>\n\n                <footer className=\"footer\">\n                    <span className=\"todo-count\"><strong>{this.props.completed}</strong> items(s) left</span>\n                    <ul className=\"filters\">\n                        <li><NavLink exact to=\"/\" activeClassName=\"selected\">All</NavLink></li>\n                        <li><NavLink exact to=\"/active\" activeClassName=\"selected\">Active</NavLink></li>\n                        <li><NavLink exact to=\"/completed\" activeClassName=\"selected\">Completed</NavLink></li>\n                    </ul>\n                    <button className=\"clear-completed\" onClick={this.deleteAll}>Clear Completed</button>\n                </footer>\n            </React.Fragment>\n        );\n    };\n};\n\nexport default TodoList;","import React, { Component } from 'react';\nimport '../index.css';\nimport TodoList from './TodoList.js';\nimport todoList from '../todos.json';\nimport { Switch, Route } from \"react-router-dom\";\nimport { } from '../actions/index.js';\n\nclass App extends Component {\n  state = {\n    todos: todoList\n  };\n\n  toggleCompleted = clickedId => event => {\n    const newTodos = this.state.todos.map(todo => {\n      if (todo.id === clickedId) {\n        todo.completed = !todo.completed;\n      }\n\n      return todo;\n    });\n\n    this.setState({ todos: newTodos });\n  };\n\n  addTodo = event => {\n    const { todos } = this.state;\n    let makeId = Math.floor(Math.random() * 500000000);\n\n    if (event.keyCode === 13) {\n      let newTodos = todos.slice(0);\n      let newest = {\n          userId: 1,\n          id: makeId,\n          title: event.target.value,\n          completed: false\n      };\n\n      newTodos.push(newest);\n      this.setState({ todos: newTodos });\n      event.target.value = \"\";\n    };\n  };\n\n  deleteOne = clickedId => event => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (todo.id === clickedId) {\n          return false;\n      }\n\n      return true;\n    });\n\n    this.setState({ todos: newTodos });\n  };\n\n  deleteAll = event => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (todo.completed === true) {\n          return false;\n      }\n\n      return true;\n    });\n\n    this.setState({ todos: newTodos });\n  };\n\n  render() {\n    const { todos } = this.state;\n    const allHandlingProps = {\n      toggleCompleted: this.toggleCompleted,\n      addTodo: this.addTodo,\n      deleteOne: this.deleteOne,\n      deleteAll: this.deleteAll,\n      // completed: todos.filter(todo => !todo.completed).length\n    };\n\n    return (\n      <section className=\"todoapp\">\n        <Switch>\n          <Route path=\"/active\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos.filter(todo => !todo.completed)} />} />\n          <Route path=\"/completed\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos.filter(todo => todo.completed)} />} />\n          <Route path=\"/\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos} />} />\n        </Switch>\n      </section>\n    );\n  };\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst Index = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App/>\n    </BrowserRouter>\n);\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Index />, document.getElementById('root'));"],"sourceRoot":""}